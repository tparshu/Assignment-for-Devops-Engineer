# Define Provider

provider "aws" {
  region     = "us-east-1"
  access_key = "AKIAS4ED5DEIK6H7ZEYX"
  secret_key = "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"

}


# Define Instance

resource "aws_instance" "DevOps_Assignment" {
  ami                    = "ami-0fc5d935ebf8bc3bc" # us-east-1
  instance_type          = "t2.micro"
  key_name               = aws_key_pair.devops_key.key_name
  subnet_id              = aws_subnet.subnet.id
  vpc_security_group_ids = ["${aws_security_group.devops_sg.id}"]
  availability_zone      = "us-east-1a"
  tags = {
    Name = "Devops_Assignment"
  }
}

output "Instance_Id" {
  value = aws_instance.DevOps_Assignment.id
}

output "PublicIpAddress" {
  value = aws_instance.DevOps_Assignment.public_ip
}
# Define VPC

resource "aws_vpc" "custom_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "custom_vpc"
  }
}

# Define subnets

resource "aws_subnet" "subnet" {
  vpc_id            = aws_vpc.custom_vpc.id
  cidr_block        = "10.0.0.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "subnet"
  }
}

# Internet Gateway

resource "aws_internet_gateway" "Igw" {
  vpc_id = aws_vpc.custom_vpc.id

  tags = {
    Name = "Igw"
  }
}

# Route Table

resource "aws_route_table" "rtbl" {
  vpc_id = aws_vpc.custom_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.Igw.id
  }
  tags = {
    Name = "rtbl"
  }
}


# Key Pair

resource "aws_key_pair" "devops_key" {
  key_name   = "devops-key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2Gd9Q2hldI/9/WaUjg4absa2yrAhAypZ/CZvAauQw6Ga0AVKrut7Eva2crYVfF60wBNweoSJbZ7qQje2twfzEbdXqqVeJL9HkGlez2gAfZEgOp1/sB/MfreynNUPPTl2iGOZhSDBwvVRb1PtwMVijCydguvWitriyVZv3I1P6iK7pigRxnRiTcPnz1vcbIpPYBaOHEOKlJj4PkcWfLuyVDQN3KQv6t+LYSBSkJ4YNpOCggX+JhhKUrmA50eupg9eA8G8B8aCNg9FOHFJR1WapuSVr8ockCcSPx4/FBoa25q7sfhV9vCYrO06/CJe9EDKvQ8Df38ThetGa5Cw6uHIHch1d1NAn6gz8eFEl/hgIaCCp0Rf20Y2Kv5BsFGafbwu7+Sg4oNjZd1FcFRe3/AHY7/ODQWf32dc9kzPPPbDQnV1/XtOLFa39OahiwVjmAcPg69tcifjmrGKg17TrOGGygf1SLD2fRSCgPhmUqfT9BjkCetRs3aC4MSf4NOFzk/E= Anved@Anved-PC"

}

# security group

resource "aws_security_group" "devops_sg" {
  name        = "devops_sg"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.custom_vpc.id

  ingress {
    description = "HTTP from VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "SSH from VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "devops_sg"
  }
}


# Create ALB

resource "aws_lb" "myalb" {
  name               = "myalb"
  internal           = false
  load_balancer_type = "application"

  security_groups = ["${aws_security_group.devops_sg.id}"]
  subnets         = [aws_subnet.subnet.id]

  tags = {
    Name = "myalb"
  }
}


#Create ALB Target group

resource "aws_lb_target_group" "tg" {
  name     = "tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.custom_vpc.id

  health_check {
    path = "/"
    port = "traffic-port"
  }
}

# Target Group attachment

resource "aws_lb_target_group_attachment" "attach" {
  target_group_arn = aws_lb_target_group.tg.arn
  target_id        = aws_instance.DevOps_Assignment.id
  port             = 80
}

# AWS ALB Listner

resource "aws_lb_listener" "listner" {
  load_balancer_arn = aws_lb.myalb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg.arn
  }
}


output "loadbalancerdns" {
  value = aws_lb.myalb.dns_name
}


#At least two subnets in two different Availability Zones must be specified and needs two Servers atleast to perform alb.
